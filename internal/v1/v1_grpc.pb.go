// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VValletServiceClient is the client API for VValletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VValletServiceClient interface {
	Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*Identity, error)
	IdentityByAlias(ctx context.Context, in *IdentityByAliasRequest, opts ...grpc.CallOption) (*Identity, error)
	RequestAuthentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*JWT, error)
}

type vValletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVValletServiceClient(cc grpc.ClientConnInterface) VValletServiceClient {
	return &vValletServiceClient{cc}
}

func (c *vValletServiceClient) Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := c.cc.Invoke(ctx, "/v1.VValletService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vValletServiceClient) IdentityByAlias(ctx context.Context, in *IdentityByAliasRequest, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := c.cc.Invoke(ctx, "/v1.VValletService/IdentityByAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vValletServiceClient) RequestAuthentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := c.cc.Invoke(ctx, "/v1.VValletService/RequestAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VValletServiceServer is the server API for VValletService service.
// All implementations must embed UnimplementedVValletServiceServer
// for forward compatibility
type VValletServiceServer interface {
	Register(context.Context, *RegistrationRequest) (*Identity, error)
	IdentityByAlias(context.Context, *IdentityByAliasRequest) (*Identity, error)
	RequestAuthentication(context.Context, *AuthenticationRequest) (*JWT, error)
	mustEmbedUnimplementedVValletServiceServer()
}

// UnimplementedVValletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVValletServiceServer struct {
}

func (UnimplementedVValletServiceServer) Register(context.Context, *RegistrationRequest) (*Identity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedVValletServiceServer) IdentityByAlias(context.Context, *IdentityByAliasRequest) (*Identity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityByAlias not implemented")
}
func (UnimplementedVValletServiceServer) RequestAuthentication(context.Context, *AuthenticationRequest) (*JWT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAuthentication not implemented")
}
func (UnimplementedVValletServiceServer) mustEmbedUnimplementedVValletServiceServer() {}

// UnsafeVValletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VValletServiceServer will
// result in compilation errors.
type UnsafeVValletServiceServer interface {
	mustEmbedUnimplementedVValletServiceServer()
}

func RegisterVValletServiceServer(s grpc.ServiceRegistrar, srv VValletServiceServer) {
	s.RegisterService(&VValletService_ServiceDesc, srv)
}

func _VValletService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VValletServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VValletService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VValletServiceServer).Register(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VValletService_IdentityByAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityByAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VValletServiceServer).IdentityByAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VValletService/IdentityByAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VValletServiceServer).IdentityByAlias(ctx, req.(*IdentityByAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VValletService_RequestAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VValletServiceServer).RequestAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VValletService/RequestAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VValletServiceServer).RequestAuthentication(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VValletService_ServiceDesc is the grpc.ServiceDesc for VValletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VValletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VValletService",
	HandlerType: (*VValletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _VValletService_Register_Handler,
		},
		{
			MethodName: "IdentityByAlias",
			Handler:    _VValletService_IdentityByAlias_Handler,
		},
		{
			MethodName: "RequestAuthentication",
			Handler:    _VValletService_RequestAuthentication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1.proto",
}
