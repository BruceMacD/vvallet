// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PublicKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublicKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublicKeyMultiError, or nil
// if none found.
func (m *PublicKey) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Created

	// no validation rules for Updated

	// no validation rules for Alg

	if utf8.RuneCountInString(m.GetSerial()) < 1 {
		err := PublicKeyValidationError{
			field:  "Serial",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PublicKeyMultiError(errors)
	}
	return nil
}

// PublicKeyMultiError is an error wrapping multiple validation errors returned
// by PublicKey.ValidateAll() if the designated constraints aren't met.
type PublicKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKeyMultiError) AllErrors() []error { return m }

// PublicKeyValidationError is the validation error returned by
// PublicKey.Validate if the designated constraints aren't met.
type PublicKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKeyValidationError) ErrorName() string { return "PublicKeyValidationError" }

// Error satisfies the builtin error interface
func (e PublicKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKeyValidationError{}

// Validate checks the field values on Identity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Identity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Identity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdentityMultiError, or nil
// if none found.
func (m *Identity) ValidateAll() error {
	return m.validate(true)
}

func (m *Identity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Created

	// no validation rules for Updated

	// no validation rules for Alias

	if all {
		switch v := interface{}(m.GetPublicKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentityValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentityValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentityValidationError{
				field:  "PublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IdentityMultiError(errors)
	}
	return nil
}

// IdentityMultiError is an error wrapping multiple validation errors returned
// by Identity.ValidateAll() if the designated constraints aren't met.
type IdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityMultiError) AllErrors() []error { return m }

// IdentityValidationError is the validation error returned by
// Identity.Validate if the designated constraints aren't met.
type IdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityValidationError) ErrorName() string { return "IdentityValidationError" }

// Error satisfies the builtin error interface
func (e IdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityValidationError{}

// Validate checks the field values on RegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistrationRequestMultiError, or nil if none found.
func (m *RegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAlias()) < 1 {
		err := RegistrationRequestValidationError{
			field:  "Alias",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPublicKey() == nil {
		err := RegistrationRequestValidationError{
			field:  "PublicKey",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPublicKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistrationRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistrationRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistrationRequestValidationError{
				field:  "PublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegistrationRequestMultiError(errors)
	}
	return nil
}

// RegistrationRequestMultiError is an error wrapping multiple validation
// errors returned by RegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type RegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationRequestMultiError) AllErrors() []error { return m }

// RegistrationRequestValidationError is the validation error returned by
// RegistrationRequest.Validate if the designated constraints aren't met.
type RegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationRequestValidationError) ErrorName() string {
	return "RegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationRequestValidationError{}

// Validate checks the field values on AuthenticationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticationRequestMultiError, or nil if none found.
func (m *AuthenticationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAlias()) < 1 {
		err := AuthenticationRequestValidationError{
			field:  "Alias",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthenticationRequestMultiError(errors)
	}
	return nil
}

// AuthenticationRequestMultiError is an error wrapping multiple validation
// errors returned by AuthenticationRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthenticationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationRequestMultiError) AllErrors() []error { return m }

// AuthenticationRequestValidationError is the validation error returned by
// AuthenticationRequest.Validate if the designated constraints aren't met.
type AuthenticationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationRequestValidationError) ErrorName() string {
	return "AuthenticationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationRequestValidationError{}

// Validate checks the field values on JWT with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *JWT) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JWT with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JWTMultiError, or nil if none found.
func (m *JWT) ValidateAll() error {
	return m.validate(true)
}

func (m *JWT) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := JWTValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JWTMultiError(errors)
	}
	return nil
}

// JWTMultiError is an error wrapping multiple validation errors returned by
// JWT.ValidateAll() if the designated constraints aren't met.
type JWTMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JWTMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JWTMultiError) AllErrors() []error { return m }

// JWTValidationError is the validation error returned by JWT.Validate if the
// designated constraints aren't met.
type JWTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JWTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JWTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JWTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JWTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JWTValidationError) ErrorName() string { return "JWTValidationError" }

// Error satisfies the builtin error interface
func (e JWTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJWT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JWTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JWTValidationError{}

// Validate checks the field values on IdentityByAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdentityByAliasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityByAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityByAliasRequestMultiError, or nil if none found.
func (m *IdentityByAliasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityByAliasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAlias()) < 1 {
		err := IdentityByAliasRequestValidationError{
			field:  "Alias",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdentityByAliasRequestMultiError(errors)
	}
	return nil
}

// IdentityByAliasRequestMultiError is an error wrapping multiple validation
// errors returned by IdentityByAliasRequest.ValidateAll() if the designated
// constraints aren't met.
type IdentityByAliasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityByAliasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityByAliasRequestMultiError) AllErrors() []error { return m }

// IdentityByAliasRequestValidationError is the validation error returned by
// IdentityByAliasRequest.Validate if the designated constraints aren't met.
type IdentityByAliasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityByAliasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityByAliasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityByAliasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityByAliasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityByAliasRequestValidationError) ErrorName() string {
	return "IdentityByAliasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IdentityByAliasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityByAliasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityByAliasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityByAliasRequestValidationError{}
